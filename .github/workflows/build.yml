name: 构建并上传插件

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 设置 JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Maven 构建
        run: |
          mvn clean package
          ls -l target/
        working-directory: "${{ github.workspace }}/Lengbanlist - main"

      - name: 提取版本号
        id: version
        run: |
          cd "${{ github.workspace }}/Lengbanlist - main"
          FULL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo $FULL_VERSION | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "将使用固定文件名: Lengbanlist.jar"

      - name: 创建制品目录
        run: |
          mkdir -p "${{ github.workspace }}/artifacts"

      - name: 复制JAR文件
        run: |
          WORKSPACE="${{ github.workspace }}/Lengbanlist - main/target"
          JAR_FILE=$(find "$WORKSPACE" \( -name "Lengbanlist - *.jar" -o -name "Lengbanlist-*.jar" \) -type f | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "错误: 在 $WORKSPACE 目录中未找到JAR文件"
            exit 1
          fi
          cp "$JAR_FILE" "${{ github.workspace }}/artifacts/Lengbanlist.jar"

      - name: 上传制品到GitHub
        uses: actions/upload-artifact@v4.3.3
        with:
          name: Lengbanlist.jar
          path: "${{ github.workspace }}/artifacts/Lengbanlist.jar"

      - name: 上传到KStore
        run: |
          cd "${{ github.workspace }}/artifacts"
          RESPONSE=$(curl --location --request POST "https://api.kstore.space/api/v1/file/create" \
            --header "X-GitHub-Event: workflow_run" \
            --header "User-Agent: Apifox/1.0.0 (https://apifox.com)" \
            --form "access_token=${{ secrets.OSS }}" \
            --form "fileId=0" \
            --form "name=Lengbanlist.jar")
          DIR_ID=$(echo "$RESPONSE" | jq -r '.data.id')
          UPLOAD_RESPONSE=$(curl --location --request POST "https://upload.kstore.space/upload/$DIR_ID?access_token=${{ secrets.OSS }}" \
            -F "file=@Lengbanlist.jar")
          DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.data.downloadUrl')
          FILE_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.data.id')
          curl --location --request POST "https://api.kstore.cc/api/v1/file/direct?access_token=${{ secrets.OSS }}" \
            --form "fileId=$FILE_ID" \
            --form "isDirect=1"
          curl --get \
            --data-urlencode "key=${{ secrets.API_KEY }}" \
            --data-urlencode "commit=${{ github.sha }}" \
            --data-urlencode "branch=${{ github.ref }}" \
            --data-urlencode "version=${{ steps.version.outputs.full_version }}" \
            --data-urlencode "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --data-urlencode "link=$DOWNLOAD_URL" \
            --data-urlencode "release=false" \
            "https://service.fpsmaster.top/pushVersion"

      - name: 生成构建摘要
        run: |
          echo "## 构建摘要" > build_summary.md
          echo "### 提交哈希: ${{ github.sha }}" >> build_summary.md
          echo "### 分支: ${{ github.ref }}" >> build_summary.md
          echo "### 版本号: ${{ steps.version.outputs.full_version }}" >> build_summary.md
          echo "### 下载地址: $DOWNLOAD_URL" >> build_summary.md
          echo "### 构建时间: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build_summary.md
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "### 提交信息:" >> build_summary.md
          echo "```" >> build_summary.md
          echo "$COMMIT_MESSAGE" >> build_summary.md
          echo "```" >> build_summary.md
          echo "### 变更文件:" >> build_summary.md
          echo "```" >> build_summary.md
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} || echo "无法获取PR变更文件"
          else
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              git diff --name-only HEAD~1 || echo "无法获取变更文件"
            else
              echo "首次提交或浅克隆，显示所有文件:"
              git ls-files
            fi
          fi
          echo "```" >> build_summary.md

      - name: 上传构建摘要
        uses: actions/upload-artifact@v4.3.3
        with:
          name: build_summary.md
          path: build_summary.md

  auto-assign-developer:
    needs: build-and-upload
    uses: ./.github/workflows/auto-assign-developer.yml

  close-inactive:
    needs: build-and-upload
    uses: ./.github/workflows/close-inactive.yml

  pr-handler:
    needs: build-and-upload
    uses: ./.github/workflows/PR_Handler.yml
